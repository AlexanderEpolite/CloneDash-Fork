using Newtonsoft.Json;

using Raylib_cs;

using System.Diagnostics.CodeAnalysis;
using System.Text;

namespace Nucleus.Files;

public static class Filesystem
{
	public static Dictionary<string, SearchPathID> Path { get; } = [];

	/// <summary>
	/// This stores some images in-code for the UI
	/// todo; a MUCH better way to do this, ie. something encoding in the application itself. I just haven't done much of that before
	/// </summary>
	/// <returns></returns>
	static MemorySearchPath MemBackedImages() {
		var mempath = new MemorySearchPath();

		using (var up32 = mempath.Open("ui/up32.png", FileAccess.Write, FileMode.Create))
			up32!.Write(Convert.FromBase64String("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAANmVYSWZNTQAqAAAAGAAAAEgAAAABAAAASAAAAAEAAgEaAAUAAAABAAAACAEbAAUAAAABAAAAEAAAAACQeO+8AAAACW9GRnMAAAAAAAAAAADaKrbOAAAACXBIWXMAAAsSAAALEgHS3X78AAAAHXRFWHRjeWNsZXMuVmlldyBMYXllci5zYW1wbGVzADI1Nlh8UgYAAAAldEVYdGN5Y2xlcy5WaWV3IExheWVyLnRvdGFsX3RpbWUAMDA6MDAuODaDnET6AAAAJnRFWHRjeWNsZXMuVmlldyBMYXllci5yZW5kZXJfdGltZQAwMDowMC4xM5u9/ecAAAAvdEVYdGN5Y2xlcy5WaWV3IExheWVyLnN5bmNocm9uaXphdGlvbl90aW1lADAwOjAwLjcy2y0CQwAAECtJREFUWAkBIBDf7wEBAQEAAAAAAP///wABAQEAAQEBAP///wD///8AAQEBAAAAAAD///8AAAAAAAAAAAABAQEAAAAAAAAAAAAAAAAAAAAAAP///wACAgIA////AAAAAAAAAAAAAAAAAAEBAQD///8AAAAAAAAAAAAAAAAA////AAEBAQAAAAAA////AAEBAQEAAAAAAAAAAAAAAAAA////AAEBAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AAAAAAABAQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEBAP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQEAAAAAAP///wAAAAAAAAAAAAAAAAABAQEA////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMBAQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQEAAAAAAAAAAAAAAAAAAAAAAAEBAQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQEA////AAAAAAAAAAAAAAAAAAEBAQAAAAAA////AAAAAAAAAAAAAAAAAAAAAAAAAAAA////AAAAAAD///8AAAAAAAAAAAD///8AAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAA////AAAAAAAAAAAAAAAAAAAAAAD+/v4AAQEBAAAAAAABAQEAAAAAAP//AQDa/v4BAgIBAP///wAAAAAA////AAEBAQAAAAAAAQEBAAAAAAAAAAAAAAAAAAAAAAABAQEAAAAAAAAAAAABAQEAAAAAAAEBAQEAAAAAAAEBAQAAAAAA////AAAAAAAAAAAAAAAAAAEBAQD///8AAAAAAAAAAAAAAAAAAAAAAPn+/gPxAAAn+gAA/wkAANoTAwL9AP8AAP///wABAQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAQD///8AAAAAAAABAQEAAQEBAAEBAQABAQEAAQEBAAEBAQABAQEAAQEBAAAAAAABAQEAAQEBAAICAgABAQEA////AeT//0nz///c9f//4er//03///8BAQEBAAEBAQABAQEAAQEBAAEBAQABAQEAAQEBAAEBAQABAQEAAQEBAAAAAAABAQEAAQEBAAACAgIAAQEBAAEBAQABAQEAAgICAAAAAAABAQEAAQEBAAEBAQACAgIAAgICAAEBAQACBAEA4P//IvD//8/t///+6////+7//8vp//8eAQUBAAEBAQAAAAAAAQEBAAEBAQABAQEAAQEBAAAAAAABAQEAAQEBAAEBAQABAQEAAQEBAAL///8AAAAAAAAAAAAAAAAA////AAEBAQD///8AAAAAAAAAAAD///8A////AAECAgDn+/4KBgAAcAAAACz/AAABAAAAAAIAADECAAB29/r+CAABAAABAQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAA////AAAAAAAB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"));
		
		using (var left32 = mempath.Open("ui/left32.png", FileAccess.Write, FileMode.Create))
			left32!.Write(Convert.FromBase64String("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"));
		
		using (var right32 = mempath.Open("ui/right32.png", FileAccess.Write, FileMode.Create))
			right32!.Write(Convert.FromBase64String("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"));

		using (var down32 = mempath.Open("ui/down32.png", FileAccess.Write, FileMode.Create))
			down32!.Write(Convert.FromBase64String("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAANmVYSWZNTQAqAAAAGAAAAEgAAAABAAAASAAAAAEAAgEaAAUAAAABAAAACAEbAAUAAAABAAAAEAAAAACQeO+8AAAACW9GRnMAAAAAAAAAAADaKrbOAAAACXBIWXMAAAsSAAALEgHS3X78AAAAHXRFWHRjeWNsZXMuVmlldyBMYXllci5zYW1wbGVzADI1Nlh8UgYAAAAldEVYdGN5Y2xlcy5WaWV3IExheWVyLnRvdGFsX3RpbWUAMDA6MDAuNzTqCjkZAAAAJnRFWHRjeWNsZXMuVmlldyBMYXllci5yZW5kZXJfdGltZQAwMDowMC4wOWJzJbgAAAAvdEVYdGN5Y2xlcy5WaWV3IExheWVyLnN5bmNocm9uaXphdGlvbl90aW1lADAwOjAwLjY0K1WWNwAAECtJREFUWAkBIBDf7wEBAQEAAAAAAP///wABAQEAAQEBAP///wD///8AAQEBAAAAAAD///8AAAAAAAAAAAABAQEAAAAAAAAAAAAAAAAAAAAAAP///wACAgIA////AAAAAAAAAAAAAAAAAAEBAQD///8AAAAAAAAAAAAAAAAA////AAEBAQAAAAAA////AAEBAQEAAAAAAAAAAAAAAAAA////AAEBAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AAAAAAABAQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEBAP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQEAAAAAAP///wAAAAAAAAAAAAAAAAABAQEA////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMBAQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQEAAAAAAAAAAAAAAAAAAAAAAAEBAQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQEA/wD/ALj+/gECBQYAwv7+AQQGBwDD/v4B/wABAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AAAAAAD///8AAAAAAAAAAAD///8AAAAAAAAAAAAAAAAAAAAAAAEBAQEAAAAAAAAAAAAAAQEA+P39CPIAAB8BAAAGAAAAAAAAAAABAAAA/wAAAf8AAAACAAD+/QAAAgQAAP/9AAAAAQAA//8AAAEBAAAAAAAA/wMAAAH+AAABAgAA/wAAAAAAAAAAAwAA//sAAPgMAADhCAIC+wAAAAABAQEA////AAEBAQEAAAAAAAEBAQD9/f0B7QAAYAQAAIT+AAAGAQAAAQAAAAAAAAD//wAAAQAAAAAAAAAB/wAA/wIAAAD/AAAAAAAAAQAAAP4AAAACAAAA/wAAAAAAAAABAQAAAP8AAP8BAAAA/wAA/wMAAPjyAAB+3QAAoEIDA/////8AAAAAAAQAAAAAAAAAAP///wAAAAAA9AAA9hEAAA3/AAANAQAAAP8AAAABAAAAAQAAAAAAAAAAAAAAAAAAAP8AAAACAAAA/wAAAAAAAAD/AAAA/wAAAAAAAAD/AAAAAgAAAAAAAAD+AAAA/wAAAAYAAPf/AAD4HQAAAP7+/wABAQAAAAAAAAIBAQEAAAAAAAAAAAACBAP/CAAAufcAALcBAAD/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD+AAAAAAAAAP8AAAAAAAAAAQAAAAAAAAAAAAAAAAAAAP8AAAD/AAAAAwAA/fgAALQFAAC3JAMC/wEBAAAAAAAAAAAAAAL///8AAAAAAAAAAAAA/v8AFwAA8QAAAIf9AADcAAAAAP8AAAD/AAAA/wAAAAAAAAD/AAAAAAAAAAEAAAAAAAAAAAAAAAEAAAABAAAAAQAAAAEAAAACAAAAAAAAAAAAAAADAAAAAQAA4voAAIUaBQLwAP8AAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAQEB/xcAANH8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"));

		return mempath;
	}
	static Filesystem() {
		var game = AddSearchPath<DiskSearchPath>("game", AppContext.BaseDirectory);
		{
			var cfg = AddSearchPath("cfg", DiskSearchPath.Combine(game, "cfg"));
			var assets = AddSearchPath("assets", DiskSearchPath.Combine(game, "assets"));
			{
				AddSearchPath("audio", DiskSearchPath.Combine(assets, "audio"));
				AddSearchPath("fonts", DiskSearchPath.Combine(assets, "fonts"));
				AddSearchPath("images", MemBackedImages());
				AddSearchPath("images", DiskSearchPath.Combine(assets, "images"));
				AddSearchPath("models", DiskSearchPath.Combine(assets, "models"));
				AddSearchPath("shaders", DiskSearchPath.Combine(assets, "shaders"));
			}
		}
	}

	/// <summary>
	/// Gets, or creates, a <see cref="SearchPathID"/>
	/// </summary>
	/// <param name="pathID"></param>
	/// <returns></returns>
	public static SearchPathID GetSearchPathID(string pathID) {
		if (Path.TryGetValue(pathID, out var pathIDObj))
			return pathIDObj;

		pathIDObj = new();
		Path[pathID] = pathIDObj;

		return pathIDObj;
	}

	public static T AddSearchPath<T>(string pathID, T searchPath, SearchPathAdd add = SearchPathAdd.ToTail) where T : SearchPath {
		var pathIDObj = GetSearchPathID(pathID);
		switch (add) {
			case SearchPathAdd.ToHead:
				pathIDObj.Insert(0, searchPath);
				break;
			case SearchPathAdd.ToTail:
				pathIDObj.Add(searchPath);
				break;
		}
		return searchPath;
	}

	public static T AddSearchPath<T>(string pathID, string path, SearchPathAdd add = SearchPathAdd.ToTail) where T : SearchPath {
		T ret;
		switch (typeof(T).Name) {
			case nameof(DiskSearchPath):
				ret = (T)(object)new DiskSearchPath(path);
				break;
			default: throw new NotImplementedException($"Unknown FileSystem type '{typeof(T).Name}'. Please implement it in Nucleus.Core.FileSystem.");
		}

		AddSearchPath(pathID, ret, add);
		return ret;
	}

	/// <summary>
	/// Adds a search path that is destroyed when the level is deinitialized.
	/// </summary>
	/// <typeparam name="T"></typeparam>
	/// <param name="pathID"></param>
	/// <param name="path"></param>
	/// <param name="add"></param>
	/// <returns></returns>
	public static T AddTemporarySearchPath<T>(string pathID, string path, SearchPathAdd add = SearchPathAdd.ToTail) where T : SearchPath {
		var level = EngineCore.Level ?? throw new NotSupportedException("Cannot create temporary search paths when no level is active.");

		var pathObj = AddSearchPath<T>(pathID, path, add);
		level.AddFinalizer((lvl) => RemoveSearchPath(pathID, pathObj));
		return pathObj;
	}

	public static T AddTemporarySearchPath<T>(string pathID, T path, SearchPathAdd add = SearchPathAdd.ToTail) where T : SearchPath {
		var level = EngineCore.Level ?? throw new NotSupportedException("Cannot create temporary search paths when no level is active.");

		var pathObj = AddSearchPath(pathID, path, add);
		level.AddFinalizer((lvl) => RemoveSearchPath(pathID, pathObj));
		return pathObj;
	}

	public static bool RemoveSearchPath(string pathID, SearchPath path) {
		if (!Path.TryGetValue(pathID, out var pathIDObj)) return false;
		return pathIDObj.Remove(path);
	}

	public static bool RemoveSearchPath(string pathID) {
		if (!Path.TryGetValue(pathID, out var pathIDObj)) return false;
		return pathIDObj.RemoveAll(x => true) > 0;
	}

	public static SearchPath? FindSearchPath(string pathID, string path) {
		foreach (var pathIDObj in GetSearchPathID(pathID))
			if (pathIDObj.Exists(path))
				return pathIDObj;

		return null;
	}

	public static IEnumerable<string> FindFiles(string pathID, string searchPattern, SearchOption searchOptions = SearchOption.TopDirectoryOnly) {
		foreach (var pathIDObj in GetSearchPathID(pathID))
			foreach (var file in pathIDObj.FindFiles("", searchPattern, searchOptions))
				yield return file;
	}

	public static IEnumerable<string> FindDirectories(string pathID, string searchPattern, SearchOption searchOptions = SearchOption.TopDirectoryOnly) {
		foreach (var pathIDObj in GetSearchPathID(pathID))
			foreach (var file in pathIDObj.FindDirectories("", searchPattern, searchOptions))
				yield return file;
	}

	public static IEnumerable<string> FindFiles(string pathID, string path, string searchPattern, SearchOption searchOptions = SearchOption.TopDirectoryOnly) {
		foreach (var pathIDObj in GetSearchPathID(pathID))
			foreach (var file in pathIDObj.FindFiles(path, searchPattern, searchOptions))
				yield return file;
	}

	public static IEnumerable<string> FindDirectories(string pathID, string path, string searchPattern, SearchOption searchOptions = SearchOption.TopDirectoryOnly) {
		foreach (var pathIDObj in GetSearchPathID(pathID))
			foreach (var file in pathIDObj.FindDirectories(path, searchPattern, searchOptions))
				yield return file;
	}

	public static bool CanOpen(string pathID, string path, FileAccess access = FileAccess.ReadWrite, FileMode mode = FileMode.OpenOrCreate) {
		foreach (var pathObj in GetSearchPathID(pathID)) {
			if (pathObj.CheckFile(path, access, mode))
				return true;
		}

		return false;
	}

	public static Stream? Open(string pathID, string path, FileAccess access = FileAccess.ReadWrite, FileMode mode = FileMode.OpenOrCreate) {
		foreach (var pathObj in GetSearchPathID(pathID)) {
			if (pathObj.CheckFile(path, access, mode)) {
				var stream = pathObj.Open(path, access, mode);
				if (stream != null) return stream;
			}
		}

		return null;
	}

	public static string? ReadAllText(string pathID, string path) {
		foreach (var pathObj in GetSearchPathID(pathID)) {
			var text = pathObj.ReadText(path);
			if (text != null) return text;
		}

		return null;
	}

	public static byte[]? ReadAllBytes(string pathID, string path) {
		foreach (var pathObj in GetSearchPathID(pathID)) {
			var bytes = pathObj.ReadBytes(path);
			if (bytes != null) return bytes;
		}

		return null;
	}

	public static bool ReadAllText(string pathID, string path, [NotNullWhen(true)] out string? text) {
		text = ReadAllText(pathID, path);
		return text != null;
	}

	public static T ReadJSON<T>(string pathID, string path) {
		return JsonConvert.DeserializeObject<T>(ReadAllText(pathID, path)!) ?? throw new Exception("Cannot deserialize.");
	}

	public static bool ReadAllBytes(string pathID, string path, [NotNullWhen(true)] out byte[]? bytes) {
		bytes = ReadAllBytes(pathID, path);
		return bytes != null;
	}

	public static bool WriteAllText(string pathID, string path, string text, Encoding encoding) {
		foreach (var pathObj in GetSearchPathID(pathID)) {
			var succeeded = pathObj.WriteText(path, text, encoding);
			if (succeeded) return true;
		}

		return false;
	}

	public static bool WriteAllText(string pathID, string path, string text) {
		foreach (var pathObj in GetSearchPathID(pathID)) {
			var succeeded = pathObj.WriteText(path, text);
			if (succeeded) return true;
		}

		return false;
	}

	public static bool WriteAllBytes(string pathID, string path, byte[] data) {
		foreach (var pathObj in GetSearchPathID(pathID)) {
			var succeeded = pathObj.WriteBytes(path, data);
			if (succeeded) return true;
		}

		return false;
	}

	private static FileNotFoundException NotFound(string pathID, string path) => new FileNotFoundException($"Cannot find '{path}' in '{pathID}'!");
	public static string GetExtension(string path) => System.IO.Path.GetExtension(path) ?? "";

	// Extra Raylib macros.

	public static Image ReadImage(string pathID, string path) {
		byte[]? data = ReadAllBytes(pathID, path);
		if (data == null) throw NotFound(pathID, path);
		return Raylib.LoadImageFromMemory(GetExtension(path), data);
	}
	public static Texture2D ReadTexture(string pathID, string path, TextureFilter filter = TextureFilter.TEXTURE_FILTER_BILINEAR) {
		using (Raylib.ImageRef img = new(ReadImage(pathID, path))) {
			var tex = Raylib.LoadTextureFromImage(img);
			Raylib.SetTextureFilter(tex, filter);
			return tex;
		}
	}
	public static Sound ReadSound(string pathID, string path) {
		byte[]? data = ReadAllBytes(pathID, path);
		if (data == null) throw NotFound(pathID, path);
		var wav = Raylib.LoadWaveFromMemory(GetExtension(path), data);
		Audio.SoundManagement.DoWaveFormat(ref wav);
		var snd = Raylib.LoadSoundFromWave(wav);
		Raylib.UnloadWave(wav);
		return snd;
	}
	public static Music ReadMusic(string pathID, string path) {
		byte[]? data = ReadAllBytes(pathID, path);
		if (data == null) throw NotFound(pathID, path);
		var music = Raylib.LoadMusicStreamFromMemory(GetExtension(path), data);
		return music;
	}
	public static Font ReadFont(string pathID, string path, int fontSize, int[] codepoints, int codepointCount) {
		byte[]? data = ReadAllBytes(pathID, path);
		if (data == null) throw NotFound(pathID, path);

		var font = Raylib.LoadFontFromMemory(GetExtension(path), data, fontSize, codepoints, codepointCount);
		return font;
	}
	public static Shader ReadVertexShader(string pathID, string vertexShader) {
		string? data = ReadAllText(pathID, vertexShader);
		if (data == null) throw NotFound(pathID, vertexShader);

		var shader = Raylib.LoadShaderFromMemory(data, null);
		return shader;
	}
	public static Shader ReadFragmentShader(string pathID, string fragmentShader) {
		string? data = ReadAllText(pathID, fragmentShader);
		if (data == null) throw NotFound(pathID, fragmentShader);

		var shader = Raylib.LoadShaderFromMemory(null, data);
		return shader;
	}
	public static Shader ReadShader(string pathID, string vertexShader, string fragmentShader) {
		string? vertexData = ReadAllText(pathID, vertexShader);
		if (vertexData == null) throw NotFound(pathID, vertexShader);

		string? fragmentData = ReadAllText(pathID, fragmentShader);
		if (fragmentData == null) throw NotFound(pathID, fragmentShader);

		var shader = Raylib.LoadShaderFromMemory(vertexData, fragmentData);
		return shader;
	}
}
